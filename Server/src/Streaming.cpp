// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Streaming.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "include/Streaming.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Middleware::Morceau> iceC_Middleware_Morceau_init("::Middleware::Morceau");

const ::std::string iceC_Middleware_Streaming_ids[2] =
{
    "::Ice::Object",
    "::Middleware::Streaming"
};
const ::std::string iceC_Middleware_Streaming_ops[] =
{
    "ajouter",
    "getMorceaux",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "rechercher",
    "supprimer"
};
const ::std::string iceC_Middleware_Streaming_ajouter_name = "ajouter";
const ::std::string iceC_Middleware_Streaming_supprimer_name = "supprimer";
const ::std::string iceC_Middleware_Streaming_rechercher_name = "rechercher";
const ::std::string iceC_Middleware_Streaming_getMorceaux_name = "getMorceaux";

}

bool
Middleware::Streaming::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Middleware_Streaming_ids, iceC_Middleware_Streaming_ids + 2, s);
}

::std::vector<::std::string>
Middleware::Streaming::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Middleware_Streaming_ids[0], &iceC_Middleware_Streaming_ids[2]);
}

::std::string
Middleware::Streaming::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Middleware::Streaming::ice_staticId()
{
    static const ::std::string typeId = "::Middleware::Streaming";
    return typeId;
}

bool
Middleware::Streaming::_iceD_ajouter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_piste;
    ::std::string iceP_titre;
    ::std::string iceP_artiste;
    ::std::string iceP_album;
    ::std::string iceP_localisation;
    istr->readAll(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation);
    inS.endReadParams();
    bool ret = this->ajouter(iceP_piste, ::std::move(iceP_titre), ::std::move(iceP_artiste), ::std::move(iceP_album), ::std::move(iceP_localisation), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Middleware::Streaming::_iceD_supprimer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_titre;
    ::std::string iceP_artiste;
    istr->readAll(iceP_titre, iceP_artiste);
    inS.endReadParams();
    bool ret = this->supprimer(::std::move(iceP_titre), ::std::move(iceP_artiste), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Middleware::Streaming::_iceD_rechercher(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_titre;
    ::std::string iceP_artiste;
    ::std::string iceP_album;
    istr->readAll(iceP_titre, iceP_artiste, iceP_album);
    inS.endReadParams();
    ::Middleware::Morceaux ret = this->rechercher(::std::move(iceP_titre), ::std::move(iceP_artiste), ::std::move(iceP_album), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}

bool
Middleware::Streaming::_iceD_getMorceaux(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::Middleware::Morceaux ret = this->getMorceaux(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}

bool
Middleware::Streaming::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Middleware_Streaming_ops, iceC_Middleware_Streaming_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Middleware_Streaming_ops)
    {
        case 0:
        {
            return _iceD_ajouter(in, current);
        }
        case 1:
        {
            return _iceD_getMorceaux(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_rechercher(in, current);
        }
        case 7:
        {
            return _iceD_supprimer(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

Middleware::Morceau::~Morceau()
{
}

const ::std::string&
Middleware::Morceau::ice_staticId()
{
    static const ::std::string typeId = "::Middleware::Morceau";
    return typeId;
}

void
Middleware::StreamingPrx::_iceI_ajouter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_ajouter_name);
    outAsync->invoke(iceC_Middleware_Streaming_ajouter_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation);
        },
        nullptr);
}

void
Middleware::StreamingPrx::_iceI_supprimer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_supprimer_name);
    outAsync->invoke(iceC_Middleware_Streaming_supprimer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_titre, iceP_artiste);
        },
        nullptr);
}

void
Middleware::StreamingPrx::_iceI_rechercher(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Middleware::Morceaux>>& outAsync, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_rechercher_name);
    outAsync->invoke(iceC_Middleware_Streaming_rechercher_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_titre, iceP_artiste, iceP_album);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Middleware::Morceaux ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Middleware::StreamingPrx::_iceI_getMorceaux(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Middleware::Morceaux>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_getMorceaux_name);
    outAsync->invoke(iceC_Middleware_Streaming_getMorceaux_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Middleware::Morceaux ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Ice::ObjectPrx>
Middleware::StreamingPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StreamingPrx>();
}

const ::std::string&
Middleware::StreamingPrx::ice_staticId()
{
    return Middleware::Streaming::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Middleware_Streaming_ajouter_name = "ajouter";

const ::std::string iceC_Middleware_Streaming_supprimer_name = "supprimer";

const ::std::string iceC_Middleware_Streaming_rechercher_name = "rechercher";

const ::std::string iceC_Middleware_Streaming_getMorceaux_name = "getMorceaux";

}
::IceProxy::Ice::Object* ::IceProxy::Middleware::upCast(::IceProxy::Middleware::Morceau* p) { return p; }

void
::IceProxy::Middleware::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Middleware::Morceau>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Middleware::Morceau;
        v->_copyFrom(proxy);
    }
}

::IceProxy::Ice::Object*
IceProxy::Middleware::Morceau::_newInstance() const
{
    return new Morceau;
}

const ::std::string&
IceProxy::Middleware::Morceau::ice_staticId()
{
    return ::Middleware::Morceau::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::Middleware::upCast(::IceProxy::Middleware::Streaming* p) { return p; }

void
::IceProxy::Middleware::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Middleware::Streaming>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Middleware::Streaming;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Middleware::Streaming::_iceI_begin_ajouter(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_ajouter_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Middleware_Streaming_ajouter_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Middleware_Streaming_ajouter_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_piste);
        ostr->write(iceP_titre);
        ostr->write(iceP_artiste);
        ostr->write(iceP_album);
        ostr->write(iceP_localisation);
        result->endWriteParams();
        result->invoke(iceC_Middleware_Streaming_ajouter_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Middleware::Streaming::end_ajouter(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Middleware_Streaming_ajouter_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Middleware::Streaming::_iceI_begin_supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_supprimer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Middleware_Streaming_supprimer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Middleware_Streaming_supprimer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_titre);
        ostr->write(iceP_artiste);
        result->endWriteParams();
        result->invoke(iceC_Middleware_Streaming_supprimer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Middleware::Streaming::end_supprimer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Middleware_Streaming_supprimer_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Middleware::Streaming::_iceI_begin_rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_rechercher_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Middleware_Streaming_rechercher_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Middleware_Streaming_rechercher_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_titre);
        ostr->write(iceP_artiste);
        ostr->write(iceP_album);
        result->endWriteParams();
        result->invoke(iceC_Middleware_Streaming_rechercher_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Middleware::Morceaux
IceProxy::Middleware::Streaming::end_rechercher(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Middleware_Streaming_rechercher_name);
    ::Middleware::Morceaux ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Middleware::Streaming::_iceI_begin_getMorceaux(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Middleware_Streaming_getMorceaux_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Middleware_Streaming_getMorceaux_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Middleware_Streaming_getMorceaux_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Middleware_Streaming_getMorceaux_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Middleware::Morceaux
IceProxy::Middleware::Streaming::end_getMorceaux(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Middleware_Streaming_getMorceaux_name);
    ::Middleware::Morceaux ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::Middleware::Streaming::_newInstance() const
{
    return new Streaming;
}

const ::std::string&
IceProxy::Middleware::Streaming::ice_staticId()
{
    return ::Middleware::Streaming::ice_staticId();
}

Middleware::Morceau::~Morceau()
{
}

::Ice::Object* Middleware::upCast(::Middleware::Morceau* p) { return p; }

::Ice::ObjectPtr
Middleware::Morceau::ice_clone() const
{
    ::Ice::Object* p = new Morceau(*this);
    return p;
}

namespace
{
const ::std::string iceC_Middleware_Morceau_ids[2] =
{
    "::Ice::Object",
    "::Middleware::Morceau"
};

}

bool
Middleware::Morceau::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Middleware_Morceau_ids, iceC_Middleware_Morceau_ids + 2, s);
}

::std::vector< ::std::string>
Middleware::Morceau::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Middleware_Morceau_ids[0], &iceC_Middleware_Morceau_ids[2]);
}

const ::std::string&
Middleware::Morceau::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Middleware::Morceau::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Middleware::Morceau";
    return typeId;
#else
    return iceC_Middleware_Morceau_ids[1];
#endif
}

void
Middleware::Morceau::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Middleware::Morceau, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Middleware::Morceau::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Middleware::Morceau, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Middleware::Morceau> iceC_Middleware_Morceau_init("::Middleware::Morceau");
}

::Ice::ValueFactoryPtr
Middleware::Morceau::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Middleware::Morceau::ice_staticId());
}

void
Middleware::_icePatchObjectPtr(MorceauPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Middleware::MorceauPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Middleware::Morceau::ice_staticId(), v);
    }
}

Middleware::Streaming::~Streaming()
{
}

::Ice::Object* Middleware::upCast(::Middleware::Streaming* p) { return p; }


namespace
{
const ::std::string iceC_Middleware_Streaming_ids[2] =
{
    "::Ice::Object",
    "::Middleware::Streaming"
};

}

bool
Middleware::Streaming::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Middleware_Streaming_ids, iceC_Middleware_Streaming_ids + 2, s);
}

::std::vector< ::std::string>
Middleware::Streaming::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Middleware_Streaming_ids[0], &iceC_Middleware_Streaming_ids[2]);
}

const ::std::string&
Middleware::Streaming::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Middleware::Streaming::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Middleware::Streaming";
    return typeId;
#else
    return iceC_Middleware_Streaming_ids[1];
#endif
}

bool
Middleware::Streaming::_iceD_ajouter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_piste;
    ::std::string iceP_titre;
    ::std::string iceP_artiste;
    ::std::string iceP_album;
    ::std::string iceP_localisation;
    istr->read(iceP_piste);
    istr->read(iceP_titre);
    istr->read(iceP_artiste);
    istr->read(iceP_album);
    istr->read(iceP_localisation);
    inS.endReadParams();
    bool ret = this->ajouter(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Middleware::Streaming::_iceD_supprimer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_titre;
    ::std::string iceP_artiste;
    istr->read(iceP_titre);
    istr->read(iceP_artiste);
    inS.endReadParams();
    bool ret = this->supprimer(iceP_titre, iceP_artiste, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Middleware::Streaming::_iceD_rechercher(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_titre;
    ::std::string iceP_artiste;
    ::std::string iceP_album;
    istr->read(iceP_titre);
    istr->read(iceP_artiste);
    istr->read(iceP_album);
    inS.endReadParams();
    ::Middleware::Morceaux ret = this->rechercher(iceP_titre, iceP_artiste, iceP_album, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}

bool
Middleware::Streaming::_iceD_getMorceaux(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Middleware::Morceaux ret = this->getMorceaux(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_Middleware_Streaming_all[] =
{
    "ajouter",
    "getMorceaux",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "rechercher",
    "supprimer"
};

}

bool
Middleware::Streaming::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Middleware_Streaming_all, iceC_Middleware_Streaming_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Middleware_Streaming_all)
    {
        case 0:
        {
            return _iceD_ajouter(in, current);
        }
        case 1:
        {
            return _iceD_getMorceaux(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_rechercher(in, current);
        }
        case 7:
        {
            return _iceD_supprimer(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Middleware::Streaming::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Middleware::Streaming, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Middleware::Streaming::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Middleware::Streaming, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Middleware::_icePatchObjectPtr(StreamingPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Middleware::StreamingPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Middleware::Streaming::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
