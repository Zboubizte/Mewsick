// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Streaming.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Streaming_h__
#define __Streaming_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Middleware
{

class Morceau;
class Streaming;
class StreamingPrx;

}

namespace Middleware
{

using Morceaux = ::std::vector<::std::shared_ptr<::Middleware::Morceau>>;

}

namespace Middleware
{

class Streaming : public virtual ::Ice::Object
{
public:

    using ProxyType = StreamingPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual bool ajouter(int, ::std::string, ::std::string, ::std::string, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_ajouter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool supprimer(::std::string, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_supprimer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Middleware::Morceaux rechercher(::std::string, ::std::string, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_rechercher(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Middleware::Morceaux getMorceaux(const ::Ice::Current&) = 0;
    bool _iceD_getMorceaux(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace Middleware
{

class Morceau : public ::Ice::ValueHelper<Morceau, Ice::Value>
{
public:

    virtual ~Morceau();

    Morceau() = default;

    Morceau(const Morceau&) = default;
    Morceau(Morceau&&) = default;
    Morceau& operator=(const Morceau&) = default;
    Morceau& operator=(Morceau&&) = default;

    Morceau(int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation) :
        piste(iceP_piste),
        titre(::std::move(iceP_titre)),
        artiste(::std::move(iceP_artiste)),
        album(::std::move(iceP_album)),
        localisation(::std::move(iceP_localisation))
    {
    }

    std::tuple<const int&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(piste, titre, artiste, album, localisation);
    }

    static const ::std::string& ice_staticId();

    int piste;
    ::std::string titre;
    ::std::string artiste;
    ::std::string album;
    ::std::string localisation;
};

static Morceau _iceS_Morceau_init;

}

namespace Middleware
{

class StreamingPrx : public virtual ::Ice::Proxy<StreamingPrx, ::Ice::ObjectPrx>
{
public:

    bool ajouter(int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &Middleware::StreamingPrx::_iceI_ajouter, iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto ajouterAsync(int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &Middleware::StreamingPrx::_iceI_ajouter, iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, context);
    }

    ::std::function<void()>
    ajouterAsync(int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation,
                 ::std::function<void(bool)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &Middleware::StreamingPrx::_iceI_ajouter, iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, context);
    }

    void _iceI_ajouter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, int, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    bool supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &Middleware::StreamingPrx::_iceI_supprimer, iceP_titre, iceP_artiste, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto supprimerAsync(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &Middleware::StreamingPrx::_iceI_supprimer, iceP_titre, iceP_artiste, context);
    }

    ::std::function<void()>
    supprimerAsync(const ::std::string& iceP_titre, const ::std::string& iceP_artiste,
                   ::std::function<void(bool)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &Middleware::StreamingPrx::_iceI_supprimer, iceP_titre, iceP_artiste, context);
    }

    void _iceI_supprimer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::Middleware::Morceaux rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Middleware::Morceaux>(true, this, &Middleware::StreamingPrx::_iceI_rechercher, iceP_titre, iceP_artiste, iceP_album, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto rechercherAsync(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Middleware::Morceaux>>().get_future())
    {
        return _makePromiseOutgoing<::Middleware::Morceaux, P>(false, this, &Middleware::StreamingPrx::_iceI_rechercher, iceP_titre, iceP_artiste, iceP_album, context);
    }

    ::std::function<void()>
    rechercherAsync(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album,
                    ::std::function<void(::Middleware::Morceaux)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Middleware::Morceaux>(response, ex, sent, this, &Middleware::StreamingPrx::_iceI_rechercher, iceP_titre, iceP_artiste, iceP_album, context);
    }

    void _iceI_rechercher(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Middleware::Morceaux>>&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::Middleware::Morceaux getMorceaux(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Middleware::Morceaux>(true, this, &Middleware::StreamingPrx::_iceI_getMorceaux, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMorceauxAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Middleware::Morceaux>>().get_future())
    {
        return _makePromiseOutgoing<::Middleware::Morceaux, P>(false, this, &Middleware::StreamingPrx::_iceI_getMorceaux, context);
    }

    ::std::function<void()>
    getMorceauxAsync(::std::function<void(::Middleware::Morceaux)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Middleware::Morceaux>(response, ex, sent, this, &Middleware::StreamingPrx::_iceI_getMorceaux, context);
    }

    void _iceI_getMorceaux(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Middleware::Morceaux>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    StreamingPrx() = default;
    friend ::std::shared_ptr<StreamingPrx> IceInternal::createProxy<StreamingPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<typename S>
struct StreamReader<::Middleware::Morceau, S>
{
    static void read(S* istr, ::Middleware::Morceau& v)
    {
        istr->readAll(v.piste, v.titre, v.artiste, v.album, v.localisation);
    }
};

}

namespace Middleware
{

using MorceauPtr = ::std::shared_ptr<Morceau>;

using StreamingPtr = ::std::shared_ptr<Streaming>;
using StreamingPrxPtr = ::std::shared_ptr<StreamingPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace Middleware
{

class Morceau;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Middleware::Morceau>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Middleware::Morceau*);

class Streaming;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Middleware::Streaming>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Middleware::Streaming*);

}

}

namespace Middleware
{

class Morceau;
::Ice::Object* upCast(::Middleware::Morceau*);
typedef ::IceInternal::Handle< ::Middleware::Morceau> MorceauPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Middleware::Morceau> MorceauPrx;
typedef MorceauPrx MorceauPrxPtr;
void _icePatchObjectPtr(MorceauPtr&, const ::Ice::ObjectPtr&);

class Streaming;
::Ice::Object* upCast(::Middleware::Streaming*);
typedef ::IceInternal::Handle< ::Middleware::Streaming> StreamingPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Middleware::Streaming> StreamingPrx;
typedef StreamingPrx StreamingPrxPtr;
void _icePatchObjectPtr(StreamingPtr&, const ::Ice::ObjectPtr&);

}

namespace Middleware
{

typedef ::std::vector< ::Middleware::MorceauPtr> Morceaux;

}

namespace Middleware
{

class Callback_Streaming_ajouter_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Streaming_ajouter_Base> Callback_Streaming_ajouterPtr;

class Callback_Streaming_supprimer_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Streaming_supprimer_Base> Callback_Streaming_supprimerPtr;

class Callback_Streaming_rechercher_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Streaming_rechercher_Base> Callback_Streaming_rechercherPtr;

class Callback_Streaming_getMorceaux_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Streaming_getMorceaux_Base> Callback_Streaming_getMorceauxPtr;

}

namespace IceProxy
{

namespace Middleware
{

class Morceau : public virtual ::Ice::Proxy<Morceau, ::IceProxy::Ice::Object>
{
public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class Streaming : public virtual ::Ice::Proxy<Streaming, ::IceProxy::Ice::Object>
{
public:

    bool ajouter(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_ajouter(_iceI_begin_ajouter(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_ajouter(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_ajouter(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ajouter(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajouter(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ajouter(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajouter(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ajouter(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Middleware::Callback_Streaming_ajouterPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajouter(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ajouter(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation, const ::Ice::Context& context, const ::Middleware::Callback_Streaming_ajouterPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajouter(iceP_piste, iceP_titre, iceP_artiste, iceP_album, iceP_localisation, context, del, cookie);
    }

    bool end_ajouter(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_ajouter(::Ice::Int, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_supprimer(_iceI_begin_supprimer(iceP_titre, iceP_artiste, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_supprimer(iceP_titre, iceP_artiste, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supprimer(iceP_titre, iceP_artiste, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supprimer(iceP_titre, iceP_artiste, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Middleware::Callback_Streaming_supprimerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supprimer(iceP_titre, iceP_artiste, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_supprimer(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::Ice::Context& context, const ::Middleware::Callback_Streaming_supprimerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supprimer(iceP_titre, iceP_artiste, context, del, cookie);
    }

    bool end_supprimer(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_supprimer(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Middleware::Morceaux rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_rechercher(_iceI_begin_rechercher(iceP_titre, iceP_artiste, iceP_album, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_rechercher(iceP_titre, iceP_artiste, iceP_album, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercher(iceP_titre, iceP_artiste, iceP_album, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercher(iceP_titre, iceP_artiste, iceP_album, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Middleware::Callback_Streaming_rechercherPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercher(iceP_titre, iceP_artiste, iceP_album, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_rechercher(const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::Ice::Context& context, const ::Middleware::Callback_Streaming_rechercherPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercher(iceP_titre, iceP_artiste, iceP_album, context, del, cookie);
    }

    ::Middleware::Morceaux end_rechercher(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_rechercher(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Middleware::Morceaux getMorceaux(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMorceaux(_iceI_begin_getMorceaux(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMorceaux(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMorceaux(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMorceaux(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMorceaux(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMorceaux(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMorceaux(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMorceaux(const ::Middleware::Callback_Streaming_getMorceauxPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMorceaux(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMorceaux(const ::Ice::Context& context, const ::Middleware::Callback_Streaming_getMorceauxPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMorceaux(context, del, cookie);
    }

    ::Middleware::Morceaux end_getMorceaux(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMorceaux(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace Middleware
{

class Morceau : public virtual ::Ice::Object
{
public:

    typedef MorceauPrx ProxyType;
    typedef MorceauPtr PointerType;

    virtual ~Morceau();

    Morceau()
    {
    }

    Morceau(::Ice::Int iceP_piste, const ::std::string& iceP_titre, const ::std::string& iceP_artiste, const ::std::string& iceP_album, const ::std::string& iceP_localisation) :
        piste(iceP_piste),
        titre(iceP_titre),
        artiste(iceP_artiste),
        album(iceP_album),
        localisation(iceP_localisation)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);

public:

    ::Ice::Int piste;
    ::std::string titre;
    ::std::string artiste;
    ::std::string album;
    ::std::string localisation;
};
static ::Ice::ValueFactoryPtr _iceS_Morceau_init = ::Middleware::Morceau::ice_factory();

inline bool operator==(const Morceau& lhs, const Morceau& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Morceau& lhs, const Morceau& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class Streaming : public virtual ::Ice::Object
{
public:

    typedef StreamingPrx ProxyType;
    typedef StreamingPtr PointerType;

    virtual ~Streaming();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual bool ajouter(::Ice::Int, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_ajouter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool supprimer(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_supprimer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Middleware::Morceaux rechercher(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_rechercher(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Middleware::Morceaux getMorceaux(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getMorceaux(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const Streaming& lhs, const Streaming& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Streaming& lhs, const Streaming& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<typename S>
struct StreamWriter< ::Middleware::Morceau, S>
{
    static void write(S* ostr, const ::Middleware::Morceau& v)
    {
        ostr->write(v.piste);
        ostr->write(v.titre);
        ostr->write(v.artiste);
        ostr->write(v.album);
        ostr->write(v.localisation);
    }
};

template<typename S>
struct StreamReader< ::Middleware::Morceau, S>
{
    static void read(S* istr, ::Middleware::Morceau& v)
    {
        istr->read(v.piste);
        istr->read(v.titre);
        istr->read(v.artiste);
        istr->read(v.album);
        istr->read(v.localisation);
    }
};

}

namespace Middleware
{

template<class T>
class CallbackNC_Streaming_ajouter : public Callback_Streaming_ajouter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Streaming_ajouter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_ajouter(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Streaming_ajouterPtr
newCallback_Streaming_ajouter(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_ajouter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Streaming_ajouterPtr
newCallback_Streaming_ajouter(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_ajouter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Streaming_ajouter : public Callback_Streaming_ajouter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Streaming_ajouter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_ajouter(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Streaming_ajouterPtr
newCallback_Streaming_ajouter(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_ajouter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Streaming_ajouterPtr
newCallback_Streaming_ajouter(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_ajouter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Streaming_supprimer : public Callback_Streaming_supprimer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Streaming_supprimer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supprimer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Streaming_supprimerPtr
newCallback_Streaming_supprimer(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_supprimer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Streaming_supprimerPtr
newCallback_Streaming_supprimer(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_supprimer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Streaming_supprimer : public Callback_Streaming_supprimer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Streaming_supprimer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supprimer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Streaming_supprimerPtr
newCallback_Streaming_supprimer(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_supprimer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Streaming_supprimerPtr
newCallback_Streaming_supprimer(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_supprimer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Streaming_rechercher : public Callback_Streaming_rechercher_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Middleware::Morceaux&);

    CallbackNC_Streaming_rechercher(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        ::Middleware::Morceaux ret;
        try
        {
            ret = proxy->end_rechercher(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Streaming_rechercherPtr
newCallback_Streaming_rechercher(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Middleware::Morceaux&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_rechercher<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Streaming_rechercherPtr
newCallback_Streaming_rechercher(T* instance, void (T::*cb)(const ::Middleware::Morceaux&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_rechercher<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Streaming_rechercher : public Callback_Streaming_rechercher_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Middleware::Morceaux&, const CT&);

    Callback_Streaming_rechercher(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        ::Middleware::Morceaux ret;
        try
        {
            ret = proxy->end_rechercher(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Streaming_rechercherPtr
newCallback_Streaming_rechercher(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Middleware::Morceaux&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_rechercher<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Streaming_rechercherPtr
newCallback_Streaming_rechercher(T* instance, void (T::*cb)(const ::Middleware::Morceaux&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_rechercher<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Streaming_getMorceaux : public Callback_Streaming_getMorceaux_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Middleware::Morceaux&);

    CallbackNC_Streaming_getMorceaux(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        ::Middleware::Morceaux ret;
        try
        {
            ret = proxy->end_getMorceaux(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Streaming_getMorceauxPtr
newCallback_Streaming_getMorceaux(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Middleware::Morceaux&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_getMorceaux<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Streaming_getMorceauxPtr
newCallback_Streaming_getMorceaux(T* instance, void (T::*cb)(const ::Middleware::Morceaux&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Streaming_getMorceaux<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Streaming_getMorceaux : public Callback_Streaming_getMorceaux_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Middleware::Morceaux&, const CT&);

    Callback_Streaming_getMorceaux(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Middleware::StreamingPrx proxy = ::Middleware::StreamingPrx::uncheckedCast(result->getProxy());
        ::Middleware::Morceaux ret;
        try
        {
            ret = proxy->end_getMorceaux(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Streaming_getMorceauxPtr
newCallback_Streaming_getMorceaux(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Middleware::Morceaux&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_getMorceaux<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Streaming_getMorceauxPtr
newCallback_Streaming_getMorceaux(T* instance, void (T::*cb)(const ::Middleware::Morceaux&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Streaming_getMorceaux<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
